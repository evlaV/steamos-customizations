#!/bin/bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# vim: et sts=4 sw=4

#  SPDX-License-Identifier: LGPL-2.1+
#
#  Copyright © 2019-2022 Collabora Ltd.
#  Copyright © 2019-2020 Valve Corporation.
#
#  This file is part of steamos-customizations.
#
#  steamos-customizations is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public License as
#  published by the Free Software Foundation; either version 2.1 of the License,
#  or (at your option) any later version.

set -e
set -u

#
# Helpers
#

log () { echo >&2 "$@"; }
warn() { echo >&2 "Warning:" "$@"; }
fail() { echo >&2 "Error:" "$@"; exit 1; }

SYMLINKS_DIR=@udev_symlinks_absdir@
PARTSETS_RELDIR=@partsets_reldir@
RAUC_RUNTIME_DIR=@rauc_runtime_dir@
REBOOT_FOR_UPDATE=@reboot_for_update@


#
# Ensure that the UUID of the update is different from the current rootfs
#

# `steamos-image-recipes` is expected to include a UUID text file inside the
# RAUC bundle
target_uuid=
if [[ -f ${RAUC_BUNDLE_MOUNT_POINT}/UUID ]]; then
    target_uuid=$(<"${RAUC_BUNDLE_MOUNT_POINT}/UUID")
elif [[ -f ${RAUC_BUNDLE_MOUNT_POINT}/rootfs.img ]]; then
    target_uuid=$(blkid -o value -s UUID ${RAUC_BUNDLE_MOUNT_POINT}/rootfs.img)
fi

if [[ ${target_uuid} ]]; then
    this_image=$(steamos-bootconf this-image)
    root_uuid=$(blkid -o value -s UUID ${SYMLINKS_DIR}/${this_image}/rootfs)

    log "Current image rootfs UUID: $root_uuid"
    log "Target image rootfs UUID: $target_uuid"

    if [[ ${root_uuid} == ${target_uuid} ]]; then
        fail "Cannot install an image with the same rootfs UUID as the current active one"
    fi
else
    log "Trying to install an update that doesn't provide its UUID, trying to continue anyway"
fi


[ -d "$RAUC_RUNTIME_DIR" ] || fail "RAUC runtime dir does not exist"

#
# We are going to install a new update, remove the eventual info about a
# pending reboot
#

rm -f -- "$REBOOT_FOR_UPDATE"

#
# Check the target partitions for corruption
#

fstype() {
    local device="$1"

    blkid -s TYPE -o value "$device"
}

check_fat() {
    declare -r device="$1"
    declare -r TYPE=$(fstype "$device")

    case "$TYPE" in
        vfat)
            # Everything is okay, we expected this
            log "Found expected VFAT EFI filesystem in ${device}."
            return 0
        ;;
        exfat)
            # Merits at least a warning
            warn "Preserving unexpected exFAT EFI filesystem in ${device}."
            return 1
        ;;
        ntfs)
            # Things have gone bad
            fail "Aborting after finding invalid NTFS filesystem in ${device}."
        ;;
        *)
            # Things have gone really bad
            fail "Aborting after finding ${TYPE} filesystem on ${device}."
        ;;
    esac
}

log "Detecting 'other' efi partition"

BOOTED_SLOT=$(steamos-bootconf this-image)
declare -r BOOTED_SLOT
PRESERVED_SLOT=
UPDATED_SLOT=

log "Booted into slot $BOOTED_SLOT"

case $BOOTED_SLOT in
    A)
        PRESERVED_SLOT=A
        UPDATED_SLOT=B
        EFI_DEVICE=$(realpath $SYMLINKS_DIR/other/efi)
        ;;
    B)
        PRESERVED_SLOT=B
        UPDATED_SLOT=A
        EFI_DEVICE=$(realpath $SYMLINKS_DIR/other/efi)
        ;;
    *)
        while read -r valid slot x
        do
            case $valid$slot in
                +A)
                    UPDATED_SLOT=B
                    PRESERVED_SLOT=A
                    ;;
                +B)
                    UPDATED_SLOT=A
                    PRESERVED_SLOT=B
                    ;;
            esac
        done < <(steamos-bootconf list-images)
        EFI_DEVICE=$(realpath $SYMLINKS_DIR/$UPDATED_SLOT/efi)
        ;;
esac

if check_fat $EFI_DEVICE; then
    if ! fsck.vfat -n $EFI_DEVICE; then
        # Errors found for $EFI_DEVICE
        warn "Found errors for ${EFI_DEVICE}, attempting repair."
        fsck.vfat -a $EFI_DEVICE
    fi
fi

#
# Disable all systemd timers
#

ACTIVE_TIMERS=$RAUC_RUNTIME_DIR/active-timers

systemctl list-units --full --no-legend --type=timer --state=active | \
while read -r service _; do
    [[ -n "$service" ]] || continue
    systemctl stop "$service" >/dev/null
    echo "$service"
done > "$ACTIVE_TIMERS"
