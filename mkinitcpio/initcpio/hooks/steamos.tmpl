#!/usr/bin/ash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# vim: et sts=4 sw=4

#  SPDX-License-Identifier: LGPL-2.1+
#
#  Copyright © 2022-2023 Collabora Ltd.
#  Copyright © 2022-2023 Valve Corporation.
#
#  This file is part of steamos-customizations.
#
#  steamos-customizations is free software; you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published
#  by the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.

NEWROOT=/new_root

# these are set by steamos_parse_cmdline based on the kernel cmdline:
steamos_efi=
steamos_factory_reset=0

emergency_shell() {
    launch_interactive_shell --exec
}

ismounted() {
    findmnt "$1" > /dev/null 2>&1
}

vinfo() {
    local x
    while read -r x; do
        msg "$x"
    done
}

to_integer() {
    if [ -n "$1" ] && [ "$1" -ne 0 ]; then
        echo 1
    else
        echo 0
    fi
}

# under dracut we'd just call getarg whenever we needed a command line value
# but initcpio does things a little differently so we cluster all the fetches
# here in one callback:
steamos_parse_cmdline() {
    local key=$1 value=$2

    case $key in
        rd.steamos.factory-reset|steamos.factory-reset)
            steamos_factory_reset=$(to_integer "$value")
            ;;
        rd.steamos.efi|steamos.efi)
            steamos_efi="$value"
            msg "EFI partition from kernel cmdline is \"$steamos_efi\""
            ;;
    esac
}

############################################################################

@STEAMOS_UDEV_RULES@

############################################################################

run_hook() {
    # This hook runs _before_ the real rootfs is mounted
    local rdev

    parse_cmdline steamos_parse_cmdline </proc/cmdline

    ######################################################################
    # reuse dracut : pre-mount : 90 : steamos-udev-rules.sh
    steamos_setup_partsets "$steamos_efi"

    ######################################################################
    # from dracut : mount : 90 : steamos-root.sh
    rdev=/dev/@udev_symlinks_reldir@/self/rootfs
    msg "Waiting for root device $rdev"
    poll_device "$rdev"

    msg "Setting root target to $rdev"
    # shellcheck disable=SC2034 # used by init_functions:default_mount_handler()
    root=$rdev

    # HERE BE DRAGONS:
    #
    # The whole RO rootfs setup and situation is quite tricky and should
    # probably be reworked. Here's some historical information and current state
    # of affairs:
    #
    # Currently we mount the rootfs (with dracut) without an explicit RO/RW
    # flag. This was required for the ext234 rootfs to work properly. In
    # particular during steamos-readonly we toggle the tune2fs RO flag, which is
    # the default state used by mount, whenever there is no explicit RO/RW
    # passed.
    #
    # At the same time, that caused systemd to try and remount the rootfs (just
    # after the pivot), resulting in failures. That was masked out via a config
    # file.
    #
    # Seemingly the explicit RO mount was also causing issues with btrfs rootfs.
    # Since the `btrfs property set` was unable to toggle the RO flag.
    #
    # Now enter mkinitcpio - it explicitly passes the RO/RW flag at mount with
    # RO being the default. If we keep it as-is, the tune2fs RO flag is ignored
    # and the ext234 fs will always be RO, so one has to manually remount on
    # every boot ... even if they use steamos-readonly disable.
    #
    # On the btrfs front, the situation is similar and/or worse. One needs to
    # remount RW manually even if they want to toggle back to steamos-readonly
    # enable.
    #
    # As a sane-ish default we opt for RW here, so while it means that for
    # ext234 fs the RO tune2fs state will be invalid, yet both fs will just work
    # correctly.
    #
    # In addition/parallel to this behaviour, the usual expectation is to have
    # /etc as non-overlay with RW rootfs, which cannot (trivially) happen. So
    # all in all, we might need something like Android, whereby when the
    # bootloader is unlocked the device is rebooted and some data (/etc overlay
    # in our case) is wiped. Otherwise, any meaningful changes to the rootfs
    # /etc will be masked by the overlay. Ideally steamos-readonly will toggle a
    # file/flag where bootloader (or initrd) will parse it and do the right
    # thing.
    #
    # But all that will happen another day.
    #
    # HERE BE DRAGONS:
    # shellcheck disable=SC2034 # used by init_functions:default_mount_handler()
    rwopt=rw

    # NOTE: under dracut we explicitly mounted the root target. mkinitcpio will
    # implicitly attempt to mount whatever 'root' is set to after 'run_hook'
}

############################################################################

@STEAMOS_FACTORY_RESET@

############################################################################

@STEAMOS_VAR@

############################################################################

@STEAMOS_ETC_OVERLAY@

############################################################################

@STEAMOS_VAR_LIB@

############################################################################

run_latehook() {
    # This is run after the rootfs is mounted, but before
    # switch_root is invoked to pivot to it:

    # re-parse the command line (settings from run_hook will have
    # disappeared by now):
    parse_cmdline steamos_parse_cmdline </proc/cmdline

    # reuse dracut : pre-pivot : 88 : steamos-factory-reset.sh
    factory_reset "$steamos_factory_reset"

    # reuse dracut : pre-pivot : 89 : steamos-var.sh
    mount_var

    # reuse dracut : pre-pivot : 90 : steamos-etc-overlay.sh
    setup_etc_overlay

    # reuse dracut : pre-pivot : 90 : steamos-var-lib-modules.sh
    initialize_var_lib_modules
}
